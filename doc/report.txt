
Backlog 2.x
TODO finish writeup

Skapade Fence.java

-- had to move initalisation of final pasture to constructor, due to compiler complaints re constructor type errors
(implicit defintion of constructor w/o arguments??)



Backlog 3.x
Jag började med att byta namn på Dummy till Sheep & lägga till rätt ikon.

Nu känns som att det kommer att bli mycket kodduplikation i de olika klassernas implementationerna av interfacet Entity,
så jag testar att göra om Entity till en abstrakt klass som tillhandahåller defaultimplementationer.

Förflyttning etc. skulle sedan kunna implementeras genom t.ex. ett interface Mobile. Lägger till detta till backlog.

Jag skapade ett interface Mobile som definierar tre metoder, som i princip motsvarar attributen alive, moveDelay & den
version av tick() som fanns i Dummy-klassen under namnet makeMove(). Tanken var att ifrån Entity köra den senare från
tick om entiteten implementerar interfacet Mobile.

Här hoppade jag snart i galen tunna när jag funderade på vad det jag ville uppnå kunde heta i java -- ordet Reflection
fanns i bakhuvudet. Efter att ha läst på lite om reflection api i Java såg jag på flera håll varningar om att det var
en avancerad teknik som sällan behövde användas. I följande kodsnutt försökte jag ta reda om en entitet implementerade
Mobile:

https://gist.github.com/kilskrift/e1b84f4e248ebb3228e3

Vid försök att köra koden med ett anrop till makeMove på objektet fick jag dock följande fel

java: unreported exception java.lang.NoSuchMethodException; must be caught or declared to be thrown

Om man fångar undantaget ser man vid körning att metoderna finns där under Sheep-klassen, men de verkar inte gå att
köra?

...
class Fence
class Sheep
instance of Mobile with class: class Sheep
public void Sheep.makeMove()
public int Sheep.getMoveDelay()
private static java.lang.Object Sheep.getRandomMember(java.util.List)
public boolean Sheep.isAlive()
class Fence
...

Efter lite mer efterforskning hittade jag en bättre (läs: fungerande!) lösningen dold bakom betydelsen av "Reflection
provides a means for invoking methods on a class. Typically, this would only be necessary if it is not possible to cast
an instance of the class to the desired type in non-reflective code." på

http://docs.oracle.com/javase/tutorial/reflect/member/methodInvocation.html

Aha, det räcker att cast:a till rätt typ (Mobile) när man väl vet att det är rätt klass (instance of Mobile) i Entity.

Backlog 3.4

Jag skapade en ny klass Wolf genom att i princip kopiera innehållet i Sheep, men gjorde vargarna dubbelt så snabba.
Därefter var det dags att extrahera gemensamma metoder. Jag testade att använda Refactor/Extract Superclass i mitt IDE,
vilket gav mig en snygg dialogruta där jag kunde välja metoder & attribut att lyfta ut till superklassen. Jag lät de
specifika inställningarna för hastighet (moveDelay) ligga kvar i konstruktorn till Wolf & Sheep, respektive, medan all
annan kod hamnade i Animal.

Troligen får jag lägga till något slags abstrakt strategimetod som anropas från makeMove
till denna för att differentiera hur djuren rör sig i framtiden? Lade in det senare som en task i backlog & commitade,
nöjd med att ha nått mitt releasemål för kraven 1 & 2.

Backlog 4

Jag skapade en ny klass Plant som ärver från Entity. I den skapade jag sedan metoder som likt Mobile's metoder räknar
ner tick tills dess det är dags för plantan att växa. Då skapar den en ny instans i en angränsande ruta i simuleringen.

Attributet alive som används för förflyttning av djur verkar vara onödigt. Utan den borde Mobile kräva färre metoder?

Borde bryta ut ett Interface för "växande"-egenskapen så att Plant fungerar likadant som Mobile i Entity::tick()

Backlog 4.4

När jag tar ut "riktning" för nya plantor gjorde jag en cast till int på uttrycket

(int)(Math.random() * pasture.getFreeNeighbours(this).size())

Här skjöt jag mig först i foten och missade att sätta uttrycket inom parenterser, med följd att jag castade resultatet
 från Math.random() från en double till 0 eller (osannolikt) 1, med följd att det blir samma beteende som tidigare i
 koden. Som tur var provkörde jag direkt & kunde se felet i simuleringen. Som alltid: var försiktig med dina casts :D

Backlog 4.5

I konstruktor för de olika djuren skickar jag med djurens hastighet till Animals konstuktor. Jag upptäckte att den
konstanten måste deklareras som static, eftersom den skickas med i anropet till konstruktorn -- logiskt när man tänker
efter förstås.

Annars var det mest en fråga om att ta bort onödiga metodanrop & snygga upp i koden till Mobile, Animal, se ändringar
i commit på github //TODO länk till commit här.

Backlog 4.6

Interface:t Multiply är rätt likt Mobile till sin uppbyggnad. Plant är på många sätt en analog till Animal, så kanske
vore det tydligare att göra Animal till abstract, för att vara tydlig med att den inte är tänkt att implementera direkt?


Backlog 5

Jag började med att override:a isCompatible i får till att acceptera att får går på gräs. Loggar när de är på samma
plats så länge, när får äter upp växter löser det troligen  problemet med att ikonerna skriver över varandra i GUI.

Efter att ha felsökt varför fåren inte ville gå på plantor lade jag till en regel om att djur var kompatibla med växter
i Plant, eftersom getFreeNeighbours() kollar "åt det hållet", tvärtemot vad jag tänkte när jag skrev regeln som lät
 växter vara kompatibla med får (dvs. de kan växa in i en ruta med ett får). Nu fungerar förflyttning som det skall.

 Därefter skapade jag ett interface Herbivore som fåren implementerar, med en metod som tar bort växter som finns på
  samma plats som ett får. Metoden anropas inifrån tick(), något jag fick anlending återkomma till senare.

 Nu såg simuleringen bra ut & jag började implementera vargar. Det visade sig att fungera att återanvända Herbivore från
 fåren, så jag bytte namn på det & även övriga interface så att de blev mer konsistenta. Namngivning är överlag svårt,
 och jag vet med mig att jag kanske är överdrivet petig.

 Nu såg det i alla fall bra ut med får som åt växter, och vargar som åt får -- dags för nästa bugg att visa
 sig, såklart -- jag fick det fruktade NullPointerException. Eftersom jag itererade över listor av objekt började jag
  att undersöka dem, med loggning till konsollen av vilka entiteter som fanns i postition när de togs bort -- jag hade
  en aning om att t.ex. vargar åt upp får som sedan åt plantor? Nu låg de metodanropen i "rätt ordning", så jag funderade
  lite till. Kanske kunde jag inte lita på att mina utskrifter var sekventiella? För säkerhets skull, och även för att
  simuleringen skulle vara konsistent (alla entiteter agerar "samtidigt" i varje klick) lade jag tillbaka alive-flaggan
  i Entity & avslutade sedan varje tick() med att göra remove på flaggade växter & får, efter att de agerat. Men alas,
  felet kvarstod! Dags för en kopp kaffe på balkongen.

  Efter paus läste jag felmeddelandet igen. Aha, felanropet kom från AWT (som ju genererar eventen som triggar tick() på
  respektive entitet, kanske ligger felet i GUI? Efter en snabb titt i Engine inser jag att där finns också en lista på
  entiteter som itereras över. Självklart är det inte i slutet av varje tick() jag skall ta bort flaggade entiteter,
  utan efter att samtliga entiter har gåtts igenom och anropats tick() på från Engine. Flyttade in koden dit & ser till
  att fånga NullPointerException med loggning ifall felet skulle återkomma i framtiden.

Dags att ta sig an krav 4, strategi för får & vargar.

Jag började med att läsa kravspecen igen för uppgift 4. Eftersom vargar bara går mot sitt byte, utan att fly från något
så börjar jag med att implementera dem.

En entitet har en omgivning av 9 rutor den kan välja att stå på i nästa drag. Alltså behöver jag från var & en av dessa
kontroller om det finns någon varg inom entitetens synfält. Efter att ha kollat lite på hur simuleringen hanterar
positioner inser jag att det inte finns några hinder för att introducera godtyckliga värden på punkter i simuleringen,
det finns inga gränser för världen utan den existerar som en mängd punkter där det finns entiteter.

Alltså: för alla befolkade punkter, ta ut den delmängd som är inom synfältet från entitetens position. Poängsätt
därefter alla 9 tänkbara punkter med ett kummulativt värde beroende på hur nära de är de olika bytesdjuren (får).

Jag tänker att varje får får ett värde av 100/1+p, där p är avståndet till fåret. Därefter försöker vargen gå till den
position som har störst värde. Riktningen sparas & är bas för hur vargen går om den inte ser några får. Kan inte vargen
gå till den ruta som har störst värde, går den i en slumpvis riktning (eg. borde den gå till näst högst poäng?).

Let's rock.


